version: '3.6'
services:
  authentication_api:
    build:
      context: api
    container_name: authentication_api
    restart: unless-stopped
    depends_on:
      maildev:
        condition: service_healthy
      authentication_dev_db:
        condition: service_healthy
    volumes:
      - "./api:/var/www"
    ports:
      - "8080:80"
    networks:
      - authentication-network
    healthcheck:
      # test: ["CMD", "wget", "--no-verbose", "--tries=1",  "http://localhost:80"]
      # test: wget --no-verbose --tries=1 --spider http://localhost:80 || exit 1
      test: curl --fail http://localhost:80 || exit 1
      interval: 4s
      retries: 5
      start_period: 15s
      timeout: 1s

  test-deno:
    build:
      context: tests/api/deno
    container_name: test-deno
    # command: deno test --allow-all
    volumes:
      - "./tests/api/deno:/test"
    depends_on:
      authentication_api:
        condition: service_healthy

  test-http:
    build:
      context: tests/api/http
    container_name: tests
    networks:
      - authentication-network
    volumes:
      - "./tests/api:/test"
    depends_on:
      authentication_api:
        condition: service_healthy
    command: httpyac send **/*.http --all --env production --output-failed exchange --output none

  # front:
  #   tty: true
  #   restart: unless-stopped
  #   container_name: authentication_front
  #   build:
  #     context: frontend
  #     target: builder
  #   command: sh -c 'npm start'
  #   ports:
  #     - '4200:4200'
  #   volumes:
  #     - "./frontend:/app"
  #     - /app/node_modules
  #   networks:
  #     - authentication-network


  authentication_dev_db:
    image: mysql:5.7
    container_name: authentication_dev_db
    restart: unless-stopped
    healthcheck:
      test: mysqladmin ping -p¿p4ssW0rd || exit 1
      interval: 4s
      retries: 5
      start_period: 15s
      timeout: 1s
    ports:
     - '3306:3306'
    volumes:
      - 'dbdata:/var/lib/mysql'
    environment:
      MYSQL_ROOT_PASSWORD: '¿p4ssW0rd'
      MYSQL_DATABASE: authentication_db
    networks:
      - authentication-network


  # authentication_adminer:
  #   image: adminer
  #   container_name: authentication_adminer
  #   restart: unless-stopped
  #   ports:
  #     - 8081:8080
  #   environment:
  #     ADMINER_PLUGINS: tables-filter tinymce
  #     PMA_HOST: authentication_dev_db
  #   depends_on:
  #     - authentication_dev_db
  #   networks:
  #     - authentication-network

  maildev:
    image: dominikserafin/maildev
    container_name: maildev
    ports:
      - "1080:1080"
      - "1025:1025"
    networks:
      - authentication-network
    # healthcheck:
    #   test: wget --spider http://localhost:1080/healthz || exit 1
    #   interval: 2s
    #   retries: 5
    #   start_period: 5s
    #   timeout: 1s

volumes:
  dbdata:
networks:
  authentication-network:
    name: authentication-network
