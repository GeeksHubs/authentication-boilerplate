import * as models from '../models';
export declare function isHttpRequestMethod(method: string | undefined): method is models.HttpMethod;
export declare function isHttpRequest(request: models.Request | undefined): request is models.HttpRequest;
export declare function isWebsocketRequest(request: models.Request | undefined): request is models.WebsocketRequest;
export declare function isEventSourceRequest(request: models.Request | undefined): request is models.EventSourceRequest;
export declare function isMQTTRequest(request: models.Request | undefined): request is models.MQTTRequest;
export declare function isGrpcRequest(request: models.Request | undefined): request is models.GrpcRequest;
export declare function deleteHeader(headers: Record<string, unknown> | undefined, ...headerNames: string[]): void;
export declare function getHeader<T>(headers: Record<string, T> | undefined, headerName: string): T | undefined;
export declare function getHeaderArray(headers: Record<string, string | string[] | undefined> | undefined, headerName: string): string[] | undefined;
export declare function parseContentType(headers: Record<string, unknown>): models.ContentType | undefined;
export interface JWTToken {
    iss?: string;
    sub?: string;
    aud?: string[];
    exp?: number;
    iat?: number;
    jti?: string;
    scope?: string;
    name?: string;
}
export declare function decodeJWT(str: string): JWTToken | null;
export declare function toQueryParams(params: Record<string, undefined | string | number | boolean>): string;
export interface RequestLoggerFactoryOptions {
    useShort?: boolean;
    requestOutput?: boolean;
    requestHeaders?: boolean;
    requestBodyLength?: number;
    responseHeaders?: boolean;
    responseBodyPrettyPrint?: boolean;
    responseBodyLength?: number;
    onlyFailed?: boolean;
}
export declare function requestLoggerFactory(log: (args: string) => void, options: RequestLoggerFactoryOptions, optionsFailed?: RequestLoggerFactoryOptions): models.RequestLogger;
export declare function isHttpResponse(val: unknown): val is models.HttpResponse;
export declare function shrinkCloneResponse(response: models.HttpResponse): models.HttpResponse;
export declare function cloneResponse(response: models.HttpResponse): models.HttpResponse;
export declare function setAdditionalResponseBody(httpResponse: models.HttpResponse, context?: models.ProcessorContext): void;
export declare function triggerRequestResponseHooks(method: () => Promise<models.HttpResponse | false>, context: models.ProcessorContext): Promise<boolean>;
